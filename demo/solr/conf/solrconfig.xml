<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is a stripped down config file used for a simple example...
 It is *not* a good example to work from.
-->
<config>

    <requestHandler name="/oai" default="false" class="org.socialhistoryservices.api.oai.OAIRequestHandler">

        <!-- WT is the key for the queryResponseWriter (see below) -->
        <str name="wt">oai</str>

        <!-- the oai_home is a path relative to the solr.home directory.
        The default is [solr_home]/oai
        In this folder the xsl stylesheets, ListMetadataPrefix.xml, Identify.xml and ListSets.xsl must be placed.
        -->
        <str name="oai_home">/oai</str>

        <!-- the base url...  -->
        <str name="proxyurl">http://localhost:8983/core0/oai</str>

        <!-- index of the oai identifier user for the -identifier parameter
         For example, if your Solr identifier index is "identifier", you set it
         to... ques what...
         -->
        <str name="field_index_identifier">identifier</str>

        <!-- The prefix will be stripped from the oai identifier value, before it is passed
        to the Solr Lucene query. For example, if your index contains a
         Solr identifiers such as the format:
         id12345
        then an OAI request like GetRecord&identifier=oai:mydomain:id12345
         is rewritten as id12345 and passed on to the Solr query.
        -->
        <str name="prefix">oai:localhost:</str>

        <!-- the field that can be used for the -from and -until  values -->
        <str name="field_index_datestamp">datestamp</str>

        <!-- the field that can be used to sort datestamps. It is relevant
        to have a sortable field for your datestamp when having paged OAI2
        results. -->
        <str name="field_sort_datestamp">datestamp</str>

        <!-- index for the -set value -->
        <str name="field_index_set">theme:"%s"</str>

        <!-- Some documents may be large or small, depending on the schema.
        In that case, we set the step of the paging to a lower count. -->
        <lst name="maxrecords">
            <int name="default">5</int>
            <int name="ead">1</int>
        </lst>

        <!-- The resumption token is build up from string parameters (from,until,set and metadataprefix). The separator
        character is a regular expression that is used to divide them up.
        You don't need to change this.
        -->
        <int name="resumptionTokenExpirationInSeconds">86400</int>
        <str name="resumptionTokenSeparator">,</str>

        <!--
        The static_query argument is an optional extra Lucene query and if set, appended as an AND query to the internal
        OAI2 query string. Use this query when you do not want to expose the entire Solr index, but a specific subset.
         For example:
         <str name="static_query">(visible:true AND status:available) OR showall:true</str>
        will be appended by the OAI2 handler so:
        [the OAI2 query here] AND ( (visible:true AND status:available) OR showall:true )
         -->
        <!--
            <str name="static_query"/>
        -->

        <!--
        The enable_filter_query is set to true or false ( false is the default ).

        Use this when the OAI2 handler is invoked via a parent handler or proxy which attaches extra query conditions dynamically.
        This can be use full when the client is not allowed to see certain records based on access policies. The latter
        you can translate into a filter query.

        Filter query arguments must be appended to the oai handler with a -fq key.

        For example, you may have an internal service that captures the client request and the identity of the client.
        You can then call the service internally like so:
        String OAI2_ARGUMENTS = capture_oai_arguments(client_request);
        String QUERY_FILTER_ARGUMENTS = get_query_arguments_from_user_authorities(client_authorities);
        SolrServer solrServer = new HttpSolrServer("http://localhost/solr/collection1/oai?" + OAI2_ARGUMENTS + "&qf=QUERY_FILTER_ARGUMENTS);

        Note: if you want to use the -fq parameter for this purpose make sure you do not allow the client to inject
        the -fq parameter. The enable_filter_query value is false when not set.
        -->
        <!--
            <bool name="enable_filter_query">false</bool>
        -->

        <!-- The xslt_parameters is a list of key-value pairs that will be passed on to the XSLT.
         For example:
         -->
        <lst name="xslt_parameters">
            <str name="key">33fa17ca-e715-445d-937e-e7140fe549a3</str>
        </lst>

    </requestHandler>
    <!-- Custom wt that is being used by the OAI handler -->
    <queryResponseWriter name="oai" default="false" class="org.socialhistoryservices.api.oai.OAIQueryResponseWriter"/>


    <luceneMatchVersion>6.6.0</luceneMatchVersion>
    <!--  The DirectoryFactory to use for indexes.
          solr.StandardDirectoryFactory, the default, is filesystem based.
          solr.RAMDirectoryFactory is memory based, not persistent, and doesn't work with replication. -->
    <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.StandardDirectoryFactory}"/>

    <dataDir>${solr.core0.data.dir:}</dataDir>

    <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:

         <schemaFactory class="ManagedIndexSchemaFactory">
           <bool name="mutable">true</bool>
           <str name="managedSchemaResourceName">managed-schema</str>
         </schemaFactory>

         When ManagedIndexSchemaFactory is specified, Solr will load the schema from
         he resource named in 'managedSchemaResourceName', rather than from schema.xml.
         Note that the managed schema resource CANNOT be named schema.xml.  If the managed
         schema does not exist, Solr will create it after reading schema.xml, then rename
         'schema.xml' to 'schema.xml.bak'.

         Do NOT hand edit the managed schema - external modifications will be ignored and
         overwritten as a result of schema modification REST API calls.

         When ManagedIndexSchemaFactory is specified with mutable = true, schema
         modification REST API calls will be allowed; otherwise, error responses will be
         sent back for these requests.
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <updateHandler class="solr.DirectUpdateHandler2">
        <updateLog>
            <str name="dir">${solr.core0.data.dir:}</str>
        </updateLog>
    </updateHandler>

    <requestHandler name="/select" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
            <str name="df">text</str>
        </lst>
    </requestHandler>

    <!-- realtime get handler, guaranteed to return the latest stored fields
      of any document, without the need to commit or open a new searcher. The current
      implementation relies on the updateLog feature being enabled. -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
        </lst>
    </requestHandler>

    <requestDispatcher handleSelect="true">
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" formdataUploadLimitInKB="2048"/>
    </requestDispatcher>

    <requestHandler name="standard" class="solr.StandardRequestHandler" default="true"/>
    <requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler"/>
    <requestHandler name="/update" class="solr.UpdateRequestHandler"/>

</config>
